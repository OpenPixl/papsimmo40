{% extends 'admin.html.twig' %}

{% block title %}Document index{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        window.onload = function(){
            // Préparation des variables
            const modalSupprDocument = document.getElementById('SupprDocument');
            const submitSupprDocument = document.getElementById('submitSupprDocument');

            // Chargement de Filetype selon le select
            // -------------------------------------
            // I. On sélectionne le select
            const typeDoc = document.getElementById('document_typeDoc')
            // II. Mise en place de l'event
            if(typeDoc !== null){
                typeDoc.addEventListener('change', function(event){
                    if(typeDoc.value == 'Pdf'){
                        document.getElementById('pdf').removeAttribute('style')
                        document.getElementById('word').style.display = "none"
                        document.getElementById('excel').style.display = "none"
                        document.getElementById('mp4').style.display = "none"
                    }else if(typeDoc.value == 'Word'){
                        document.getElementById('pdf').style.display = "none"
                        document.getElementById('word').removeAttribute('style')
                        document.getElementById('excel').style.display = "none"
                        document.getElementById('mp4').style.display = "none"
                    }else if(typeDoc.value == 'Excel'){
                        document.getElementById('pdf').style.display = "none"
                        document.getElementById('word').style.display = "none"
                        document.getElementById('excel').removeAttribute('style')
                        document.getElementById('mp4').style.display = "none"
                    }else if(typeDoc.value == 'Mp4'){
                        document.getElementById('pdf').style.display = "none"
                        document.getElementById('word').style.display = "none"
                        document.getElementById('excel').style.display = "none"
                        document.getElementById('mp4').removeAttribute('style')
                    }
                })

                // PARTIE Ajout de la category
                // ---------------------------------------
                // I. Mise en place du Select2
                const TsPropertyBanner = new TomSelect("#document_category",{
                    plugins: ['remove_button'],
                    create: true,
                    onItemAdd:function(){
                        this.setTextboxValue('');
                        this.refreshOptions();
                    },
                    render:{
                        option:function(data,escape){
                            return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                        },
                        item:function(data,escape){
                            return '<div>' + escape(data.data) + '</div>';
                        }
                    }
                });
                // II. Préparation de la modale
                const addCategory  = new bootstrap.Modal(document.getElementById('addCategory'), {keyboard: true})
                document.getElementById('btnAddCatDocument').addEventListener('click', function(event){
                    event.preventDefault()
                    addCategory.show()
                })
                document.getElementById('submitAddCatDocument').addEventListener('click', function(event){
                    event.preventDefault()
                    let formAddCatDocument = document.getElementById('formAddCatDocument')
                    let urlAddCatDocument = formAddCatDocument.action
                    let dataAddCatDocument = new FormData(formAddCatDocument)
                    axios
                        .post(urlAddCatDocument, dataAddCatDocument)
                        .then(function(response){
                            // Message d'alerte en cas de réussite
                            let toastHTMLElement = document.getElementById("toaster");
                            let message = response.data.message;
                            let toastBody = toastHTMLElement.querySelector('.toast-body') // selection de l'élément possédant le message
                            toastBody.innerHTML = message;
                            let toastElement = new bootstrap.Toast(toastHTMLElement, {animation: true, autohide: true, delay: 3000});
                            toastElement.show();
                            // Ajout dans le TomSelect de la nouvelle option.
                            const selectbanner = document.getElementById('document_category');
                            const optionbanner = document.createElement("option")
                            optionbanner.setAttribute("value", response.data.value)
                            optionbanner.setAttribute("data-data", response.data.data)
                            optionbanner.text = response.data.banner;
                            selectbanner.add(optionbanner)
                            TsPropertyBanner.addOption({data: response.data.data, value:response.data.value})
                            TsPropertyBanner.addItem(response.data.cat)
                            addCategory.hide()
                        })
                        .catch(function(error){
                            console.log(error)
                        })
                    axios
                        .post('/gestapp/choice/cat/document/json/1')
                        .then(function(response){
                            document.getElementById('listCat').innerHTML = response.data.liste
                        })
                        .catch(function(error){
                            console.log(error)
                        })
                })

                // PARTIE Ajout du document
                // ---------------------------------------
                document.getElementById('submitDocument').addEventListener('click', function(event){
                    event.preventDefault()
                    let formAddDocument = document.getElementById('FormAddDocument')
                    let urlAddDocument = formAddDocument.action
                    let dataAddDocument = new FormData(formAddDocument)
                    axios
                        .post(urlAddDocument, dataAddDocument)
                        .then(function(response){
                            document.getElementById('listDocument').innerHTML = response.data.list
                            // Mise en place de l'évenement pour la suppression d'un bien en cours de création
                            document.querySelectorAll('a.btnModalSupprDocument').forEach(function(link){
                                link.addEventListener('click', ModalSupprDocument)
                            })
                            // Message d'alerte en cas de réussite
                            var toastHTMLElement = document.getElementById("toaster");
                            var message = response.data.message;
                            var toastBody = toastHTMLElement.querySelector('.toast-body') // selection de l'élément possédant le message
                            toastBody.innerHTML = message;
                            var toastElement = new bootstrap.Toast(toastHTMLElement, {animation: true, autohide: true, delay: 3000});
                            toastElement.show();
                            formAddDocument.reset()
                        })
                        .catch(function(error){
                            console.log(error.response.data);
                            console.log(error.response.status);
                            console.log(error.response.headers);
                        })
                })

            }

            // PARTIE Suppression du document
            // ---------------------------------------
            // Code d'ouverture de la modale de suppression d'une ligne en mode création d'un bien
            modalSupprDocument.addEventListener('show.bs.modal', event => {
                let a = event.relatedTarget;
                let url = a.href;
                let modalFooterA = modalSupprDocument.querySelector(".modal-footer #submitSupprDocument");
                modalFooterA.href = url;
            })

            submitSupprDocument.addEventListener('click', function(event){
                event.preventDefault()
                let urlSupprDocument = this.href
                axios
                    .post(urlSupprDocument)
                    .then(function(response){
                        document.getElementById('listDocument').innerHTML = response.data.liste
                        // Mise en place de l'évenement pour la suppression d'un bien en cours de création
                        document.querySelectorAll('a.btnModalSupprDocument').forEach(function(link){
                            link.addEventListener('click', ModalSupprDocument)
                        })
                        // Message d'alerte en cas de réussite
                        var toastHTMLElement = document.getElementById("toaster");
                        var message = response.data.message;
                        var toastBody = toastHTMLElement.querySelector('.toast-body') // selection de l'élément possédant le message
                        toastBody.textContent = message;
                        var toastElement = new bootstrap.Toast(toastHTMLElement, {animation: true, autohide: true, delay: 3000});
                        toastElement.show();
                    })
            })

            // ------------------------------------
            // Génération du Sortable - Déplacement des documents et ordres d'affichages
            //-------------------------------------
            const sortableDoc = document.getElementById("sortDoc")
            if(sortableDoc !== null){
                new Sortable(sortableDoc, {
                    animation:150,
                    // Called by any change to the list (add / update / remove)
                    onSort: function (event) {
                        let cols = sortableDoc.children
                        let data = Array()
                        // on boucle sur le résultat des enfants pour envoyer au controller la modification du positionnement des photos
                        for(i = 0; i < cols.length; i++){
                            let idcol = cols[i].id
                            let key = i
                            data.push({"key" : key, "idcol" : parseInt(idcol)})
                        }
                        let url = "/gestapp/document/updateposition"
                        axios
                            .post(url, data)
                            .then(function(response){
                                //document.getElementById('listDocument').innerHTML = response.data.listDocument
                                // initialisation du toaster bootstrap
                                var toastHTMLElement = document.getElementById("toaster");
                                var message = response.data.message;
                                var toastBody = toastHTMLElement.querySelector('.toast-body') // selection de l'élément possédant le message
                                toastBody.textContent = message;
                                var toastElement = new bootstrap.Toast(toastHTMLElement, {animation: true, autohide: true, delay: 3000});
                                toastElement.show();
                            })
                            .catch(function(error){
                                console.log(error);
                            })
                    },
                })
            }

            function FilterDocument(event){
                event.preventDefault()
                let url = this.href
                axios
                    .get(url)
                    .then(function(response){
                        document.getElementById('sortDoc').innerHTML = response.data.liste
                    })
                    .catch(function (error){
                        console.log(error)
                    })
            }

            // Mise en place de l'évenement pour la suppression d'un bien en cours de création
            document.querySelectorAll('a.btnModalSupprDocument').forEach(function(link){
                link.addEventListener('click', ModalSupprDocument)
            })

            // Filtrage des documents
            document.querySelectorAll('a.btnCat').forEach(function(link){
                link.addEventListener('click', FilterDocument)
            })
        }
    </script>
{% endblock %}

{% block contentTitle %}
    <div class="row">
        <div class="col-sm-12">
            <h1>RESSOURCES - Listes des documents disponibles</h1>
        </div>
    </div>
{% endblock %}

{% block content %}
<div class="row">
    {% if is_granted('ROLE_SUPER_ADMIN') %}
    <div class="col-sm-12">
        {{ render(controller('App\\Controller\\Gestapp\\DocumentController::new2'))}}
    </div>
    {% endif %}
    <div id="docCategory" class="col-sm-12">
        <h4><i class="fa-duotone fa-ballot-check"></i> Choix d'une catégorie</h4>
        <div id="listCat">
            {{ render(controller('App\\Controller\\Gestapp\\choice\\CatDocumentController::listcat', {'json':0}))}}
        </div>
    </div>
    <div id="listDocument" class="col-sm-12">
        <h4><i class="fa-duotone fa-file-signature"></i> Documents</h4>
        <div class="row mt-3 g-1" id="sortDoc">
            <div class="alert alert-light mt-3">
                <p class="mb-0">Veuillez cliquer d'abord sur l'une des catégories pour afficher les documents liés.</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block modal %}
    <section id="modals">
        {# Ajout d'une catégorie #}
        <div class="modal fade" id="addCategory" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter une categorie</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        {{ render(controller('App\\Controller\\Gestapp\\choice\\CatDocumentController::new')) }}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button id="submitAddCatDocument" type="submit" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Ajouter</button>
                    </div>
                </div>
            </div>
        </div>
        {# Suppression d'un document #}
        <div class="modal fade" id="SupprDocument" tabindex="-1" aria-labelledby="SupprDocument" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel"><span class="text-warning">Suppression du document</span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p class="text-center">
                            <span class="text-warning"><b>Attention :</b></span><br>
                            Vous êtes sur le point de supprimer le document sélectionné en validant sur le bouton "Supprimer définitivement".
                        </p>
                        <p class="text-center">Etes-vous sûr de vouloir continuer ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <a href="#" id="submitSupprDocument" class="btn btn-sm btn-outline-warning submitSupprDocument" data-bs-dismiss="modal">Supprimer définitivement</a>
                    </div>
                </div>
            </div>
        </div>

        {# annonce toaster #}
        <div aria-live="polite" aria-atomic="true" class="position-relative">
            <div class="toast-container position-absolute top-50 end-0 p-3">
                <div id="toaster" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">Bootstrap</strong>
                        <small>à l'instant</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        Hello, world! This is a toast message.
                    </div>
                </div>
            </div>
        </div>

    </section>
{% endblock %}


