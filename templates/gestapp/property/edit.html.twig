{% extends 'admin.html.twig' %}

{% block title %}Edit Property{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        window.onload = function(){
            // récupération des id des panels
            const navInformations = document.getElementById("navInformations");
            const navCustomers = document.getElementById("navCustomers");
            const navEstimate = document.getElementById("navEstimate");
            const navOptions = document.getElementById("navOptions");
            const navGallery = document.getElementById("navGallery");
            const navPublication = document.getElementById("navPublication");

            // récupération des boutons de navigation entre panel
            const stepBack = document.getElementById("stepCustomers");
            const nextStepInformations = document.getElementById("stepInformations");
            const nextStepCustomers = document.getElementById("stepCustomers");
            const nextStepEstimate = document.getElementById("stepEstimate");
            const nextStepOptions = document.getElementById("stepOptions");
            const nextStepGallery = document.getElementById("stepGallery");
            const nextStepPublication = document.getElementById("stepPublication");

            // fixer les éléments opérationnel au chargement de la page
            const Informations = document.getElementById("Informations");
            const Customers = document.getElementById("Customers");
            const Estimate = document.getElementById("Estimate");
            const Options = document.getElementById("Options");
            const Gallery = document.getElementById("Gallery");
            const Publication = document.getElementById("Publication");

            const focus = document.getElementById('property_refMandat');
            focus.focus()

            // -------------
            // STEP 0 : Mise en place des styles de démarrage
            // -------------
            // Désactivation des onglets d'accueil de la page d'édition
            navCustomers.className = "nav-link disabled";
            navCustomers.className = "nav-link disabled";
            navCustomers.className = "nav-link disabled";
            navCustomers.className = "nav-link disabled";
            navCustomers.className = "nav-link disabled";
            navCustomers.className = "nav-link disabled";
            // Masquage des boutons de navigation sous le formulaire
            nextStepCustomers.className += " d-none";
            nextStepEstimate.className += " d-none";
            nextStepOptions.className += " d-none";
            nextStepGallery.className += " d-none";
            nextStepPublication.className += " d-none";


            // -------------
            // STEP 1 : enregistrement des informations initiales du bien sur clic du boutons next
            // -------------
            nextStepInformations.onclick = function (event) {
                event.preventDefault()
                // action sur
                nextStepCustomers.className = "btn btn-sm btn-outline-primary";
                nextStepInformations.className += " d-none";
                navInformations.className = "nav-link disabled";
                navCustomers.className = "nav-link active";
                Informations.className = "tab-pane";
                Customers.className += " active";
                // Elements de formulaire à transmettre
                let url = this.href;
                let id = document.getElementById('property_id').value
                let refMandat =document.getElementById('property_refMandat').value
                let name = document.getElementById('property_name').value
                let ref = document.getElementById('property_ref').value
                let adress = document.getElementById('property_adress').value
                let complement = document.getElementById('property_complement').value
                let zipcode = document.getElementById('property_zipcode').value
                let city = document.getElementById('property_city').value
                let annonce = document.getElementById('property_annonce').value
                let piece = parseInt(document.getElementById('property_piece').value)
                let room = parseInt(document.getElementById('property_room').value)
                let isHome = document.getElementById('property_isHome').checked
                let isApartment = document.getElementById('property_isApartment').checked
                let isLand = document.getElementById('property_isLand').checked
                let isOther = document.getElementById('property_isOther').checked
                let otherDescription = document.getElementById('property_otherDescription').value
                let constructionAt = new Date(document.getElementById('property_constructionAt').value)
                let imageFile = document.getElementById('property_imageFile_file')
                let data = {
                    name: name, ref: ref, adress: adress, complement:complement, zipcode:zipcode, city: city, annonce: annonce,
                    piece: piece, room: room, isHome: isHome, isApartment: isApartment, isLand: isLand, isOther: isOther,
                    otherDescription: otherDescription, constructionAt:constructionAt, refMandat:refMandat
                }
                console.log(data)
                // envoie des données
                axios
                    .post(url, data)
                    .then(function(response){
                        // préparation du toaster
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
                // Envoie de l'image
                let formData = new FormData();
                formData.append("file", imageFile.files[0]);
                axios
                    .post('/gestapp/property/stepinformationsimg/'+id, formData)
                    .then(function(response){
                        console.log('image envoyée')
                        // préparation du toaster
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
            }

            // -------------
            // STEP 2 : Enregistrement du ou des acheteurs
            // -------------
            stepCustomers.onclick = function (event) {
                event.preventDefault()
                // visibilité des éléments
                stepCustomers.className += " d-none";
                stepEstimate.className = "btn btn-sm btn-outline-primary";
                navCustomers.className = "nav-link disabled";
                navEstimate.className = "nav-link active";
                Customers.className = "tab-pane";
                Estimate.className += " active";
            }

            // Modal d'ajout d'un vendeur à la fiche
            const modalAddCustomer = document.getElementById('addCustomer')
            modalAddCustomer.addEventListener('show.bs.modal', function (event) {
                // Button that triggered the modal
                var button = event.relatedTarget
                // extraction de la variable
                var recipient = button.getAttribute('data-bs-whatever')
                // mise à jour du lien de soumission du formulaire.
                var modalContent = modalAddCustomer.querySelector('.modal-footer')
                var modalSubmit = modalAddCustomer.querySelector('.modal-footer a')
                modalSubmit.href = '/gestapp/customer/addcustomerjson/' + recipient
            })
            // Evènement sur le bouton btnAddCustomers - Modal d'ajout d'un vendeur
            const btnAddCustomer = document.getElementById('btnAddCustomer')
            btnAddCustomer.onclick = function(event){
                event.preventDefault()
                const firstName = document.getElementById('customer_firstName').value
                const lastName = document.getElementById('customer_lastName').value
                const adress = document.getElementById('customer_adress').value
                const complement = document.getElementById('customer_complement').value
                const zipcode = document.getElementById('customer_zipcode').value
                const city = document.getElementById('customer_city').value
                const url = this.href
                // construction des data à transmettre
                let data = {
                    firstName:firstName, lastName:lastName, adress:adress, complement:complement, zipcode:zipcode, city:city
                }
                console.log(data)
                // envoie des données
                axios
                    .post(url, data)
                    .then(function(response){
                        console.log('vendeur ajouté')
                        const liste = document.getElementById('listeCustormers').innerHTML = response.data.liste;
                        modalAddCustomer.addEventListener('hide.bs.modal')
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
            }
            // Fonction de suppression d'un client
            function SupprCustomer (event){
                event.preventDefault()
                const url = this.href
                axios
                    .post(url)
                    .then(function(response){
                        const liste = document.getElementById('listeCustormers').innerHTML = response.data.liste;
                    })
            }
            // Ajout d'un évènement sur le click AddCustomerSearch
            document.querySelectorAll('a.addcustomersearch').forEach(function (link){
                link.addEventListener('click', AddCustomerSearch);
            })
            // fonction d'ajout depuis l'évènement AddCustomerSearch
            function AddCustomerSearch(event){
                event.preventDefault()
                let url = this.href
                axios
                    .post(url)
                    .then(function(response){
                        document.getElementById('listeCustormers').innerHTML = response.data.liste
                        // relance de l'évènement sur le click AddCustomerSearch
                        document.querySelectorAll('a.addcustomersearch').forEach(function (link){
                            link.addEventListener('click', AddCustomerSearch);
                        })
                    })
            }
            // fonction de recherche "Customer" depuis le formulaire
            document.getElementById('search_customers_rechercher').addEventListener('click', function(event) {
                event.preventDefault()
                let urlSearchCustomer = this.href
                let formsearchCustomer = new FormData()
                formsearchCustomer.append('search_customers[word]', document.getElementById('search_customers_word').value)
                formsearchCustomer.append('search_customers[_token]', document.getElementById('search_customers__token').value)
                axios
                    .post(urlSearchCustomer, formsearchCustomer)
                    .then(function (response) {
                        document.getElementById('listeSearchCustomers').innerHTML = response.data.liste
                        // relance de l'évènement sur le click AddCustomerSearch
                        document.querySelectorAll('a.addcustomersearch').forEach(function (link) {
                            link.addEventListener('click', AddCustomerSearch);
                        })
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
            })


            // -------------
            // STEP 3 : Enregistrement des chiffres
            // -------------
            stepEstimate.onclick = function (event) {
                event.preventDefault()
                // visibilité des éléments
                stepEstimate.className += " d-none";
                stepOptions.className = "btn btn-sm btn-outline-primary";
                navEstimate.className = "nav-link disabled";
                navOptions.className = "nav-link active";
                Estimate.className = "tab-pane";
                Options.className += " active";
                // Elements de formulaire à transmettre
                let url = this.href;
                let surfaceLand = parseInt(document.getElementById('property_surfaceLand').value)
                let surfaceHome = parseInt(document.getElementById('property_surfaceHome').value)
                let notaryEstimate = parseInt(document.getElementById('property_notaryEstimate').value)
                let applicantEstimate = parseInt(document.getElementById('property_applicantEstimate').value)
                let dpeAt = new Date(document.getElementById('property_dpeAt').value);
                let diagDpe = parseInt(document.getElementById('property_diagDpe').value)
                let diagGes = parseInt(document.getElementById('property_diagGes').value)
                let dpeEstimateEnergyDown = parseInt(document.getElementById('property_dpeEstimateEnergyDown').value)
                let dpeEstimateEnergyUp = parseInt(document.getElementById('property_dpeEstimateEnergyUp').value)
                let cadasterZone = document.getElementById('property_cadasterZone').value
                let cadasterNum = parseInt(document.getElementById('property_cadasterNum').value)
                let cadastersurface = parseInt(document.getElementById('property_cadasterSurface').value)
                let data = {
                    surfaceLand:surfaceLand, surfaceHome:surfaceHome, notaryEstimate:notaryEstimate, applicantEstimate:applicantEstimate,
                    dpeAt:dpeAt, diagDpe: diagDpe, diagGes:diagGes, dpeEstimateEnergyDown:dpeEstimateEnergyDown, dpeEstimateEnergyUp:dpeEstimateEnergyUp,
                    cadasterZone:cadasterZone, cadasterNum:cadasterNum, cadastersurface:cadastersurface
                }
                // envoie des données
                axios
                    .post(url, data)
                    .then(function(response){
                        // préparation du toaster
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
            }


            // ---------------------------------------
            // STEP 4 : Enregistrement des options
            //
            // ---------------------------------------

            stepOptions.onclick = function (event) {
                event.preventDefault()
                // visibilité des éléments
                stepOptions.className += " d-none";
                stepGallery.className = "btn btn-sm btn-outline-primary";
                navOptions.className = "nav-link disabled";
                navGallery.className = "nav-link active";
                Options.className = "tab-pane";
                Gallery.className += " active";
                // Elements de formulaire à transmettre
                const url = this.href;

                const banner = document.getElementById('complement_banner').value
                const denomination = parseInt(document.getElementById('complement_denomination').value)

                const terrace = parseInt(document.getElementById('complement_terrace').value)
                const washroom = parseInt(document.getElementById('complement_washroom').value)
                const bathroom = parseInt(document.getElementById('complement_bathroom').value)
                const wc = parseInt(document.getElementById('complement_wc').value)
                const balcony = parseInt(document.getElementById('complement_balcony').value)

                const propertyState = document.getElementById('complement_propertyState').value
                const propertyEnergy = document.getElementById('complement_propertyEnergy').value
                const propertyTax = document.getElementById('complement_propertyTax').value
                const propertyOrientation = document.getElementById('complement_propertyOrientation').value
                const disponibility = document.getElementById('complement_disponibility').value
                const location = document.getElementById('complement_location').value
                const disponibilityAt = new Date(document.getElementById('complement_disponibilityAt').value)

                const isFurnished = document.querySelector('input[name="complement[isFurnished]"]:checked').value;
                const propertyEquipment = []
                for (let option of document.getElementById('complement_propertyEquipment').options)
                {
                    if (option.selected) {
                        propertyEquipment.push(parseInt(option.value))
                    }
                }
                const propertyTypology = document.getElementById('complement_propertyTypology').value
                const level = parseInt(document.getElementById('complement_level').value)
                const otherOption = document.getElementById('complement_otherOption').value
                let data = {
                    banner:banner,denomination:denomination,
                    terrace:terrace,washroom:washroom,bathroom:bathroom,wc:wc,balcony:balcony,
                    propertyState:propertyState,propertyEnergy:propertyEnergy,propertyTax:propertyTax,propertyOrientation:propertyOrientation,disponibility:disponibility,location:location,disponibilityAt:disponibilityAt,
                    isFurnished:isFurnished,propertyEquipment:propertyEquipment,propertyTypology:propertyTypology,level:level,otherOption:otherOption
                }
                // envoie des données
                axios
                    .post(url, data)
                    .then(function(response){
                        // préparation du toaster
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
            }

            // PARTIE Bannière sur image
            // ---------------------------------------
            // SELECT
            new TomSelect("#complement_banner",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });

            // PARTIE Catégorie du bien - SELECT
            // ---------------------------------------
            new TomSelect("#complement_denomination",{
                plugins: ['remove_button', 'change_listener'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });
            // PARTIE Catégorie du bien - Ouverture de la modale
            const modalHouseCat = document.getElementById('modalHouseCat')
            const HouseCat = new bootstrap.Modal(modalHouseCat, { keyboard: true })
            const addHouseCat = document.getElementById('addHouseCat')
            addHouseCat.addEventListener('click', function(event){
                console.log('ok')
                HouseCat.show()
            })
            // PARTIE Catégorie du bien - Envoi du formulaire
            let property_cat = document.getElementById('FormHouseCat')
            property_cat.addEventListener('submit', function (event) {
                event.preventDefault()
                let url_property_cat = '/gestapp/choice/denomination/new2'
                let data_property_cat = new FormData(property_cat)
                axios
                    .post(url_property_cat, data_property_cat)
                    .then(function(response)
                    {
                        const select = document.getElementById('complement_denomination');
                        const option = document.createElement("option")
                        option.setAttribute("value", response.data.valuecat)
                        option.setAttribute("data-data", response.data.cat)
                        option.text = response.data.cat;
                        select.add(option)
                        HouseCat.hide()
                    })
                    .catch(function(error){
                        console.log(error);
                    })
            })

            // PARTIE Etat du bien - SELECT
            new TomSelect("#complement_propertyState",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });
            // PARTIE Etat du bien - Ouverture de la modale
            const modalHouseState = document.getElementById('modalHouseState')
            const HouseState = new bootstrap.Modal(modalHouseState, { keyboard: true })
            const addHouseState = document.getElementById('addHouseState')
            addHouseState.addEventListener('click', function(event){
                console.log('ok')
                HouseState.show()
            })
            // PARTIE Etat du bien - Envoi du formulaire
            let property_state = document.getElementById('FormHouseState')
            property_state.addEventListener('submit', function (event) {
                event.preventDefault()
                let url_property_state = '/gestapp/choice/property/state/new2'
                let data_property_state = new FormData(property_state)
                axios
                    .post(url_property_state, data_property_state)
                    .then(function(response)
                    {
                        const select = document.getElementById('complement_propertyState');
                        const option = document.createElement("option")
                        option.setAttribute("data-data", response.data.state)
                        option.setAttribute("value", response.data.valuestate)
                        option.text = response.data.state;
                        console.log(option)
                        select.add(option)

                        HouseState.hide()

                    })
                    .catch(function(error){
                        console.log(error);
                    })
            })

            // PARTIE Energy du bien - SELECT
            new TomSelect("#complement_propertyEnergy",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });
            // PARTIE Energy du bien - Ouverture de la modal
            const modalHouseEnergy = document.getElementById('modalHouseEnergy')
            const HouseEnergy = new bootstrap.Modal(modalHouseEnergy, { keyboard: true })
            const addHouseEnergy = document.getElementById('addHouseEnergy')
            addHouseEnergy.addEventListener('click', function(event){
                console.log('ok')
                HouseEnergy.show()
            })
            // PARTIE Energy du bien - Envoi du formulaire
            let FormHouseEnergy = document.getElementById('FormHouseEnergy')
            FormHouseEnergy.addEventListener('submit', function (event) {
                event.preventDefault()
                let url_property_energy = '/gestapp/choice/property/energy/new2'
                let data_property_energy = new FormData(FormHouseEnergy)
                axios
                    .post(url_property_energy, data_property_energy)
                    .then(function(response)
                    {
                        const select = document.getElementById('complement_propertyEnergy');
                        const options = document.createElement("option");
                        options.text = response.data.unit;
                        console.log(response.data.unit)
                        HouseEnergy.hide()
                    })
                    .catch(function(error){
                        console.log(error);
                    })
            })


            // PARTIE Orientation du bien - SELECT
            new TomSelect("#complement_propertyOrientation",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });
            // PARTIE Orientation du bien - Ouverture de la modal
            const modalHouseOrientation = document.getElementById('modalHouseOrientation')
            const HouseOrientation = new bootstrap.Modal(modalHouseOrientation, { keyboard: true })
            const addHouseOrientation = document.getElementById('addHouseOrientation')
            addHouseOrientation.addEventListener('click', function(event){
                console.log('ok')
                HouseOrientation.show()
            })
            // PARTIE Orientation du bien - Envoi du formulaire
            let FormHouseOrientation = document.getElementById('FormHouseOrientation')
            FormHouseOrientation.addEventListener('submit', function (event) {
                event.preventDefault()
                let url_property_orientation = '/gestapp/choice/property/orientation/new2'
                let data_property_orientation = new FormData(FormHouseOrientation)
                axios
                    .post(url_property_orientation, data_property_orientation)
                    .then(function(response)
                    {
                        const select = document.getElementById('complement_propertyOrientation');
                        const options = document.createElement("option");
                        options.text = response.data.orientation;
                        console.log(response.data.orientation)
                        HouseOrientation.hide()
                    })
                    .catch(function(error){
                        console.log(error);
                    })
            })

            // PARTIE disponibilité du bien - SELECT
            new TomSelect("#complement_disponibility",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });

            // PARTIE location du bien - SELECT
            new TomSelect("#complement_location",{
                placeholder: "A définir",
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });



            // PARTIE Equipement du bien - SELECT
            new TomSelect("#complement_propertyEquipment",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });
            // PARTIE Equipement du bien - Ouverture de la modal
            const modalHouseEquipment = document.getElementById('modalHouseEquipment')
            const HouseEquipment = new bootstrap.Modal(modalHouseEquipment, { keyboard: true })
            const addHouseEquipment = document.getElementById('addHouseEquipment')
            addHouseEquipment.addEventListener('click', function(event){
                console.log('ok')
                HouseEquipment.show()
            })
            // PARTIE Orientation du bien - Envoi du formulaire
            let FormHouseEquipment = document.getElementById('FormHouseEquipment')
            FormHouseEquipment.addEventListener('submit', function (event) {
                event.preventDefault()
                let url_property_equipment = '/gestapp/choice/property/orientation/new2/'
                let data_property_equipment = new FormData(FormHouseEquipment)
                axios
                    .post(url_property_equipment, data_property_equipment)
                    .then(function(response)
                    {
                        const select = document.getElementById('complement_propertyEquipment');
                        const options = document.createElement("option");
                        options.text = response.data.orientation;
                        console.log(response.data.orientation)
                        HouseOrientation.hide()
                    })
                    .catch(function(error){
                        console.log(error);
                    })
            })


            // SELECT Typology
            new TomSelect("#complement_propertyTypology",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });
            // SELECT other options
            new TomSelect("#complement_otherOption",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });


            // ---------------------------------------
            //
            // STEP 5 : Enregistrement des images du bien
            //
            // ---------------------------------------
            stepGallery.onclick = function (event) {
                event.preventDefault()
                nextStepGallery.className += " d-none";
                nextStepPublication.className = "btn btn-sm btn-outline-primary";
                navGallery.className = "nav-link disabled";
                navPublication.className = "nav-link active";
                Gallery.className = "tab-pane";
                Publication.className += " active";
            }
            // Ajout d'une image sur un bien
            let form = document.getElementById('addPhoto')
            form.addEventListener('submit', function (event) {
                event.preventDefault()
                let url = form.action
                let data = new FormData(form)
                axios
                    .post(url, data)
                    .then(function(response)
                    {
                        // rafraichissement du tableau
                        const listephoto = document.getElementById('listephoto').innerHTML = response.data.listephoto;

                        // rechargement des events
                        document.querySelectorAll('a.js-data-suppr').forEach(function(link){
                            link.addEventListener('click', onClickDelEvent)
                        })
                    })
                    .catch(function(error){
                        console.log(error);
                    })
            })
            // Suppression d'une image
            function delphoto(event){
                event.preventDefault()
                let urldelphoto = this.href
                axios
                    .post(urldelphoto)
                    .then(function(response){
                        const listephoto = document.getElementById('listephoto').innerHTML = response.data.listephoto;
                        document.querySelectorAll('a.delphoto').forEach(function (link){
                            link.addEventListener('click', delphoto);
                        })
                    })
            }
            document.querySelectorAll('a.delphoto').forEach(function (link){
                link.addEventListener('click', delphoto);
            })


            // -------------
            // STEP 6 : Publication du bien sur le site ou les Réseaux sociaux
            // -------------
            stepPublication.onclick = function (event) {
                event.preventDefault()
                // visibilité des éléments
                stepPublication.className = "btn btn-sm btn-outline-primary";
                navGallery.className = "nav-link disabled";
                navPublication.className = "nav-link active";
                Gallery.className = "tab-pane";
                Publication.className += " active";
                // Elements de formulaire à transmettre
                const url = this.href;
                const isWebpublish = document.getElementById('publication_isWebpublish').checked
                const isSocialNetwork = document.getElementById('publication_isSocialNetwork').checked
                const sector = document.getElementById('publication_sector').value
                let data =
                    {
                        isWebpublish:isWebpublish,isSocialNetwork:isSocialNetwork,sector:sector
                    }
                axios
                    .post(url, data)
                    .then(function(response){
                        document.location.href= "{{ path('op_gestapp_property_index') }}";
                    })
                    .catch(function (error) {
                        // handle error
                        console.log(error);
                    })
            }

            new TomSelect("#publication_sector",{
                plugins: ['remove_button'],
                create: true,
                onItemAdd:function(){
                    this.setTextboxValue('');
                    this.refreshOptions();
                },
                render:{
                    option:function(data,escape){
                        return '<div class="d-flex"><span>' + escape(data.data) + '</span><span class="ms-auto text-muted">' + escape(data.value) + '</span></div>';
                    },
                    item:function(data,escape){
                        return '<div>' + escape(data.data) + '</div>';
                    }
                }
            });

            // mise en place du datapicker flatpickr sur les champs de date
            flatpickr(".flatpickr", {
                "locale": "fr",
                enableTime: true,
                allowInput:true,
                altFormat: "j F Y",
                dateFormat: "d/m/Y",
            });
            // mise en place du datapicker flatpickr sur les champs de date
            flatpickr(".flatpickrtime", {
                "locale": "fr",
                enableTime: true,
                noCalendar: true,
                dateFormat: "H:i",
                time_24hr: true
            });

            ClassicEditor
                .create(document.querySelector('#property_annonce'), {
                    height: 50
                })
                .catch(error => {
                    console.error(error);
                });

            // --------
            // Ajouts des éléments Events
            // --------

            // Création de l'event sur le lien supprcustomer
            document.querySelectorAll('a.supprcustomer').forEach(function(link){
                link.addEventListener('click', SupprCustomer)
            })
        }
    </script>
{%  endblock %}

{% block breadcrumb %}
    <ol class="breadcrumb">
        <li class="breadcrumb-item active"><a href="{{ path('op_admin_dashboard_index') }}"><i class="fa-duotone fa-house-blank"></i> Tableau de Bord</a></li>
        <li class="breadcrumb-item active">Transaction</li>
        <li class="breadcrumb-item active"><a href="{{ path('op_gestapp_property_index') }}">Biens immobilier</a></li>
    </ol>
{% endblock %}

{% block content %}

    {% if app.request.attributes.get('_route') == 'op_gestapp_property_edit'%}
        <h1>Edition du bien Paps Immo</h1>
    {% else %}
        <h1>Créer un nouveau bien Paps Immo</h1>
    {% endif %}


    {# read and display several types of flash messages #}
    {% for label, messages in app.flashes(['success', 'warning']) %}
        {% for message in messages %}
            <div class="flash-{{ label }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endfor %}

    {% if app.request.attributes.get('_route') == 'op_gestapp_property_edit'%}
        {{ include('gestapp/property/_formfirst.html.twig', {'button_label': "Finaliser l'édition de ce nouveau bien"}) }}
    {% else %}
        {{ include('gestapp/property/_formfirst.html.twig', {'button_label': 'Finaliser la création de ce nouveau bien'}) }}
    {% endif %}

{% endblock %}

{% block footer %}
    {{ parent() }}
    <section id="modals">
        <!-- Ajout d'un vendeur sur un bien -->
        <div class="modal fade" id="addCustomer" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter un client à cette fiche</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        {{ render(controller('App\\Controller\\Gestapp\\CustomerController::addCustomer')) }}
                        <input id="idProperty" type="hidden" value="">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <a id="btnAddCustomer" type="button" class="btn btn-sm btn-primary" data-bs-dismiss="modal">Ajouter</a>
                    </div>
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseCat #}
        <div class="modal fade" id="modalHouseCat" tabindex="-1" aria-labelledby="addHouseCat" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter une Catégorie de type F1, F2... :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\DenominationController::new')) }}
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseState #}
        <div class="modal fade" id="modalHouseState" tabindex="-1" aria-labelledby="addHouseState" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter un état :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\PropertyStateController::new')) }}
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseEnergy #}
        <div class="modal fade" id="modalHouseEnergy" tabindex="-1" aria-labelledby="addHouseEnergy" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter une source d'énergie :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\PropertyEnergyController::new')) }}
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseOrientation #}
        <div class="modal fade" id="modalHouseOrientation" tabindex="-1" aria-labelledby="addHouseOrientation" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter une source d'énergie :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\PropertyOrientationController::new')) }}
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseEquipement #}
        <div class="modal fade" id="modalHouseEquipment" tabindex="-1" aria-labelledby="addHouseEquipment" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter un nouvel équipement :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\PropertyEquipementController::new')) }}
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseTypology #}
        <div class="modal fade" id="modalHouseTypology" tabindex="-1" aria-labelledby="addHouseTypology" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter une typologie :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\PropertyTypologyController::new')) }}
                </div>
            </div>
        </div>
        {# Modal d'ajout HouseState #}
        <div class="modal fade" id="modalHouseOther" tabindex="-1" aria-labelledby="addHouseOther" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ajouter une typologie :</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    {{ render(controller('App\\Controller\\Gestapp\\choice\\PropertyStateController::new')) }}
                </div>
            </div>
        </div>
        <div aria-live="polite" aria-atomic="true" class="bg-dark position-relative">
            <div class="toast-container position-absolute bottom-100 end-0 p-3">
                <div id="toaster" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <img src="..." class="rounded me-2" alt="...">
                        <strong class="me-auto">Paps Immo 40</strong>
                        <small class="text-muted">A l'instant</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        Hello, world! This is a toast message.
                    </div>
                </div>
            </div>
        </div>
    </section>
{% endblock %}