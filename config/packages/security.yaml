security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Admin\Employed:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Admin\Employed
                property: email
    firewalls:
        api:
                   pattern: ^/api
                   stateless: true
                   provider: app_user_provider
                   jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            json_login:
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\Admin\LoginAuthenticator
            logout:
                path: op_admin_security_logout
                # where to redirect after logout
                target: op_webapp_public_index

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/opadmin/dashboard, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/properties, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/property, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/propriete, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/proprietes, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/employed, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/employeds, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/collaborateur, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/collaborateurs, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/customers, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/customer, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/client, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/clients, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/recos, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/reco, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/recommandation, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/api/recommandations, roles: [ROLE_EMPLOYED, ROLE_API, ROLE_PRESCRIBER] }
        - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
        - { path: ^/api/search/collaborateur/, roles: PUBLIC_ACCESS }
        - { path: ^/api/authentication_token, roles: PUBLIC_ACCESS }
        - { path: ^/gestapp/transaction, roles: ROLE_EMPLOYED }
        - { path: ^/gestapp/customer, roles: ROLE_EMPLOYED }
        - { path: ^/gestapp/document, roles: ROLE_EMPLOYED }
        - { path: ^/cart/product, roles: ROLE_EMPLOYED }
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_PRESCRIBER: ROLE_USER
        ROLE_API: ROLE_API
        ROLE_EMPLOYED: ROLE_PRESCRIBER
        ROLE_ADMIN: ROLE_EMPLOYED
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
